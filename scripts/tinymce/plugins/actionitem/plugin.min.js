tinymce.PluginManager.add("actionitem", function (editor, url) {
  editor.addButton("actionitem", {
    text: "Action Item",
    icon: false,
    onclick: function () {
      let selection = editor.selection.getContent({ format: "html" });

      let selectedNode = editor.selection.getNode();
      let actionItem = null;
      let isEditing = false;

      let parent = selectedNode.parentNode;
      let firstChild = selectedNode.firstChild;

      if (!selectedNode.dataset.actionItem) {
        if (parent && parent.dataset && parent.dataset.actionItem) {
          selectedNode = parent;
        } else {
          while (
            firstChild &&
            firstChild.dataset &&
            !firstChild.dataset.actionItem
          ) {
            firstChild = firstChild.firstChild;
          }
          if (
            firstChild &&
            firstChild.dataset &&
            firstChild.dataset.actionItem
          ) {
            selectedNode = firstChild;
          }
        }
      }

      if (
        selectedNode &&
        selectedNode.dataset &&
        selectedNode.dataset.actionItem
      ) {
        try {
          actionItem = JSON.parse(
            selectedNode.dataset.actionItem.split("'").join('"')
          );
          isEditing = true;
        } catch (error) {
          actionItem = null;
          isEditing = false;
        }
      }

      buildfire.actionItems.showDialog(
        actionItem,
        { allowNoAction: false, showIcon: false, showTitle: false },
        (err, actionItem) => {
          if (err) return console.error(err);
          if (!actionItem) return;

          let stringifiedActionItem = escape(JSON.stringify(actionItem));

          if (isEditing) {
            let anchor = `<a href="#" data-action-item="${stringifiedActionItem}" onclick="buildfire.actionItems.execute(JSON.parse(unescape('${stringifiedActionItem}')), ()=>{})">${selectedNode.innerHTML}</a>`;
            selectedNode.parentNode.innerHTML = anchor;
          } else {
            let anchor = `<a href="#" data-action-item="${stringifiedActionItem}" onclick="buildfire.actionItems.execute(JSON.parse(unescape('${stringifiedActionItem}')), ()=>{})">${selection}</a>`;
            editor.selection.setContent(anchor);
          }
          editor.fire("change");
        }
      );
    },
  });

  return {
    getMetadata: function () {
      return {
        name: "Action Item Plugin",
        url: "https://github.com/BuildFire/sdk/wiki/How-to-use-action-Items",
      };
    },
  };
});
