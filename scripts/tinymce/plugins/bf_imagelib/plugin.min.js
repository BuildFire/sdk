tinymce.PluginManager.add('bf_imagelib', function (editor, url) {
  let dialogHeight = window.innerHeight > 675 ? 675 : window.innerHeight - 20;
  // Add a button that opens a window
  editor.ui.registry.addButton('bf_imagelib', {
    // text: 'Image Library',
    icon: 'image',
    tooltip: 'Insert image',
    onAction: function () {
      showDialog(false);
    }
  });
  editor.ui.registry.addButton('bf_change_image', {
    icon: 'image',
    tooltip: 'Change image',
    onAction: function () {
      changeImage();
    }
  });
  editor.ui.registry.addButton('bf_edit_image', {
    icon: 'edit-block',
    tooltip: 'Edit image',
    onAction: function () {
      showDialog(true);
    }
  });
  editor.ui.registry.addButton('bf_edit_image_action', {
    icon: 'link',
    tooltip: 'Edit image action',
    onAction: function () {
      editAction();
    }
  });
  editor.ui.registry.addContextToolbar('editBfImage', {
    predicate: function (node) {
        return node.dataset.bfImage;
    },
    items: 'bf_edit_image bf_change_image | bf_edit_image_action',
    position: 'node',
    scope: 'node'
  });
  editor.ui.registry.addMenuItem('bf_insertImage', {
    text: 'Insert image',
    icon: 'image',
    onAction: function() {
      showDialog(false);
    }
  });
  editor.ui.registry.addMenuItem('bf_changeImage', {
    text: 'Change image',
    icon: 'image',
    onAction: function() {
      changeImage();
    }
  });
  editor.ui.registry.addMenuItem('bf_editImage', {
    text: 'Edit image',
    icon: 'edit-block',
    onAction: function() {
      showDialog(true);
    }
  });
  editor.ui.registry.addMenuItem('bf_editImageAction', {
    text: 'Edit image action',
    icon: 'link',
    onAction: function() {
      editAction();
    }
  });
  editor.ui.registry.addContextMenu('bf_imageContextMenu', {
    update: function (element) {
      return element.dataset.bfImage ? 'bf_editImage bf_changeImage bf_editImageAction' : '';
    }
  });

  function showDialog(isEditing) {
    let elementNode = editor.selection.getNode();
    let imageProperties = elementNode.dataset.bfImage ? JSON.parse(unescape(elementNode.dataset.bfImage)) : '';
    let cancelButton = { text: 'Cancel', type: 'cancel'};
    let insertImageButton = {text: 'Insert Image', name: 'Insert Image', type: 'custom', primary : true};
    let EditButton = {text: "Save", name: 'Edit Button', type: 'custom', primary : true};
  
    function showTinymceImageDialog(title, buttons, querystring) {
      editor.windowManager.openUrl({
        title: title,
        url: `${url}/dialog.html?data=${encodeURIComponent(querystring)}`,
        width: 450,
        height: dialogHeight,
        buttons,
        onAction: (dialogApi, details) => {
          if (details.name === 'Insert Image' || details.name === 'Edit Button') {
            dialogApi.sendMessage({
              message: 'getImage'
            });
          }
        },
        onMessage : (dialogApi, details) => {
          let imageData = details.data.imageData;
          let mceAction = details.mceAction;
          let image = document.createElement('img');
          if (imageData.width) {
            image.width = imageData.width;
          }
          image.src = imageData.src;
          image.alt = imageData.alt;
          if(imageData.widgetImageExpression)
            image.setAttribute('expr-src', imageData.widgetImageExpression);
          image.setAttribute('class', imageData.widgetImageClass);
          image.setAttribute('data-bf-image', imageData.imageAspects);
          if (imageData && mceAction === 'setImage') {
            if (isEditing) {
              if (imageData.width) {
                elementNode.width = imageData.width;
              } else {
                elementNode.removeAttribute("width");
              }
              elementNode.src = imageData.src;
              elementNode.alt = imageData.alt;
              elementNode.dataset.mceSrc = imageData.src;
              elementNode.dataset.bfImage = imageData.imageAspects;
              if (imageData.widgetImageExpression)
                elementNode.setAttribute('expr-src', imageData.widgetImageExpression);
              elementNode.setAttribute('class',imageData.widgetImageClass);
              elementNode.removeAttribute('width');
              elementNode.removeAttribute('height');
              editor.isNotDirty = false;
              editor.fire("change");
            } else {
              editor.insertContent(image.outerHTML);
            }
            dialogApi.close();
          }
        }
      });
    }
  
    if (!isEditing) {
      const options = {
        showIcons: false,
        multiSelection: false,
      };
      buildfire.imageLib.showDialog(options, (err, results) => {
        if (err) return console.error(err);
  
        const imageUrl = results.selectedFiles[0];
        if (!imageUrl || !imageUrl.length) return;
    
        let buttons = [cancelButton, insertImageButton];
        let data = { imageUrl };
        let querystring = JSON.stringify(data);
        showTinymceImageDialog('Insert Image', buttons, querystring)
      });
    } else {
      let buttons = [cancelButton, EditButton]
      let data = { 
        imageUrl: elementNode.src,
        imageDescription: elementNode.alt,
        imageProperties
      };
      let querystring = JSON.stringify(data);
      showTinymceImageDialog('Edit Image', buttons, querystring)
    }
  }

  function showAcionItemDialog(options, callback) {
    options = options || {};
    options.actionItem = options.actionItem || {};
    buildfire.actionItems.showDialog(
      options.actionItem,
      { allowNoAction: true, showIcon: false, showTitle: false },
      (err, actionItem) => {
        if (err) return callback(err, null);
        if (!actionItem) return callback('There is no action item', null);
        options.element.setAttribute('data-execute', escape(JSON.stringify(actionItem)));
        options.element.setAttribute('onclick', 'buildfire.actionItems.execute(JSON.parse(unescape(this.getAttribute("data-execute"))), ()=>{})');
        callback();
      }
    );
  }

  function editAction() {
    let options = {};
    let elementNode = editor.selection.getNode();
    options.actionItem = elementNode.dataset.execute ? JSON.parse(unescape(elementNode.dataset.execute)) : {};
    options.element = elementNode;
    showAcionItemDialog(options, (err, res) => {
      if (err) return console.error(err);
      editor.isNotDirty = false;
      editor.fire('change');
    })
  }

  function changeImage() {
    let elementNode = editor.selection.getNode();
    let imageProperties = elementNode.dataset.bfImage ? JSON.parse(unescape(elementNode.dataset.bfImage)) : '';
    const options = {
      showIcons: false,
      multiSelection: false,
    };
    buildfire.imageLib.showDialog(options, (err, results) => {
      if (err) return console.error(err);
      const imageUrl = results.selectedFiles[0];
      if (!imageUrl || !imageUrl.length) return;
      imageProperties.originalSrc = imageUrl;
      let widgetImageExpression;
      const escapedImageUrl = imageUrl.replace(/(?<!\\)'/g, "\\'");
      if (imageProperties.resize) {
        widgetImageExpression = '${buildfire.imageLib.resizeImage(\'' + escapedImageUrl + '\', { size: \'' + imageProperties.responsive + '\', aspect: \'1:1\' })}';
      } else {
        widgetImageExpression = '${buildfire.imageLib.cropImage(\'' + escapedImageUrl + '\', { size: \'' + imageProperties.responsive + '\', aspect: \'' + imageProperties.crop + '\'' +  '})}';
      }
      let stringifiedImageProperties = escape(JSON.stringify(imageProperties));
      elementNode.setAttribute('expr-src', widgetImageExpression);
      if (imageProperties.responsive?.includes('_') && imageProperties.resize) elementNode.setAttribute('class', imageProperties.responsive);
      elementNode.setAttribute('data-bf-image', stringifiedImageProperties);
      let resizedImageUrl = getResizedImage(imageProperties);
      elementNode.src = resizedImageUrl;
      elementNode.dataset.mceSrc = resizedImageUrl;
      editor.isNotDirty = false;
      editor.fire('change');
    });
  }

  function getResizedImage(imageProperties) {
    let resizedImage = "";
    let size = imageProperties.fixed ? imageProperties.fixed : imageProperties.responsive;
    if (imageProperties.resize) {
        resizedImage = buildfire.imageLib.resizeImage(imageProperties.originalSrc, {
          size: size,
          aspect: "1:1",
       });
    } else {
      resizedImage = buildfire.imageLib.cropImage(imageProperties.originalSrc, {
        size: size,
        aspect: imageProperties.crop,
      });
    }
    return resizedImage;
  }

  return {
    getMetadata: function () {
      return {
        name: 'ImageLib plugin',
        url: 'https://github.com/BuildFire/sdk/wiki/How-to-use-ImageLib',
      };
    },
  };
});