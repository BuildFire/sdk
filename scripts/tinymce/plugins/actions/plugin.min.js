tinymce.PluginManager.add('actions', function (editor) {

    const actionItems = [];
    actionItems["linkToApp"] = { title: "Link to App content" };
    actionItems["navigateToAppSettings"] = { title: "Link to Settings page" };
    actionItems["navigateToBookmarks"] = { title: "Link to bookmarks" };
    actionItems["callNumber"] = { title: "Call Phone Number" };
    actionItems["linkToSocialFacebook"] = { title: "Link to Facebook page" };
    actionItems["linkToSocialInstagram"] = { title: "Link to Instagram page" };
    actionItems["linkToSocialLinkedIn"] = { title: "Link to LinkedIn page" };
    actionItems["navigateToAdress"] = { title: "Link to Google Maps" };
    actionItems["navigateToLogin"] = { title: "Link to Login page" };
    actionItems["navigateToNotes"] = { title: "Link to Notes" };
    actionItems["navigateToNotifications"] = { title: "Link to Notifications" };
    actionItems["sendEmail"] = { title: "Send an email" };
    actionItems["sendSms"] = { title: "Send an SMS" };
    actionItems["noAction"] = { title: "No Action" };
    actionItems["linkToSocialTwitter"] = { title: "Link to Twitter page" };
    actionItems["linkToWeb"] = { title: "Link to Web page" };

    tinymce.settings.menu.insert.items =
        tinymce.settings.menu.insert.items + Object.keys(actionItems).toString().replaceAll(',', ' ');

    Object.keys(actionItems).forEach(function (key) {
        editor.addMenuItem(key, {
            icon: 'link',
            text: actionItems[key].title,
            onclick: function () { renderDialog(key); }
        });
    });

    function renderDialog(action) {

        let selection = editor.selection.getContent({ format: "html" });
        let selectedNode = editor.selection.getNode();
        let actionItem = selectedNode && selectedNode.dataset.actionItem ?
            JSON.parse(unescape(selectedNode.dataset.actionItem)) : null;

        buildfire.actionItems.showDialog(
            { action: action, title: actionItem ? actionItem.title : (selection ? selection : 'Action Item') },
            { allowNoAction: false, showIcon: false, showTitle: false },
            (err, result) => {
                if (!result) return;

                let stringifiedActionItem = escape(JSON.stringify(result));
                let content = `<a href="#" data-action-item="${stringifiedActionItem}" 
                onclick="buildfire.actionItems.execute(JSON.parse(unescape('${stringifiedActionItem}')), ()=>{})">
                 ${result.title}</a>`;

                if (actionItem) {
                    selectedNode.dataset.actionItem = stringifiedActionItem;
                    selectedNode.setAttribute("onclick", `buildfire.actionItems.execute(JSON.parse(unescape('${stringifiedActionItem}')), ()=>{})`)
                    selectedNode.innerHTML = result.title;
                }
                else editor.selection.setContent(content);

                editor.fire("change");
            });
    }
});