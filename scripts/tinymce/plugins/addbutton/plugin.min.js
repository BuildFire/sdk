
tinymce.PluginManager.add("addbutton", function (editor, url) {

  editor.addButton("addbutton", {
    text: "Add Button",
    icon: false,
    onclick: function () {
      renderDialog();
    }
  });

  function renderDialog(text, className, actionItem) {
    editor.windowManager.open({
      title: "Add Button",
      url: url + "/dialog.html",
      width: 400,
      height: 250,
      onPostRender: function (e, f) {
        const modal = editor.windowManager.getWindows()[0];
        function getElementById(id) {
          return modal.getContentWindow().document.getElementById(id);
        }

        let colors = null;
        buildfire.appearance.getAppTheme(function (err, theme) {
          colors = theme.colors;
          setTimeout(() => {
            getElementById('primary').style.backgroundColor = colors.primaryTheme;
            getElementById('success').style.backgroundColor = colors.successTheme;
            getElementById('info').style.backgroundColor = colors.infoTheme;
            getElementById('warning').style.backgroundColor = colors.warningTheme;
            getElementById('default').style.backgroundColor = colors.defaultTheme;
            getElementById('danger').style.backgroundColor = colors.dangerTheme;
            
            getElementById('buttons-container').style.display = 'flex';
            if (text && className) {
              className = className.split('-')[1];
              getElementById(className).focus();
              getElementById('selected').value = className;
            }
          }, 500);
        });
      },
      buttons: [
        {
          text: "Next",
          classes: 'widget btn primary',
          onclick: function () {
            const modal = editor.windowManager.getWindows()[0];
            function getElementById(id) {
              return modal.getContentWindow().document.getElementById(id);
            }

            let selectedButton = getElementById('selected').value.trim();
            let content = tinymce.activeEditor.selection.getContent({ format: 'text' });
            let capitalizedButton = selectedButton.charAt(0).toUpperCase() + selectedButton.slice(1);
            
            if (!selectedButton) return;
            else {
              modal.close();
              buildfire.actionItems.showDialog(
                actionItem ? actionItem : { title:  content ? content : capitalizedButton },
                { allowNoAction: false, showIcon: false, showTitle: false },
                (err, actionItem) => {
                  if (!err && !actionItem) return;

                  let stringifiedActionItem = escape(JSON.stringify(actionItem));
                  let content = `<button type="button" class="btn btn-${selectedButton}"
                  data-execute="${stringifiedActionItem}"
                  onclick="buildfire.actionItems.execute(JSON.parse(unescape('${stringifiedActionItem}')), ()=>{})"
                  > ${actionItem.title}</button>&nbsp;`

                  if (text && className && actionItem)
                    editor.selection.setContent(content);
                  else
                    editor.insertContent(content);
                });
            }
          }
        },
        {
          text: 'Cancel',
          onclick: function () {
            const modal = editor.windowManager.getWindows()[0];
            modal.close();
          }
        },
      ]
    });
  }

  return {
    getMetadata: function () {
      return {
        name: "Add Button Plugin"
      };
    },
    render: function (text, className, actionItem) { renderDialog(text, className, actionItem) }
  };
});
